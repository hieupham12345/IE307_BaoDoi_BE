import { printStackTrace } from 'yerror';
import { service } from './util.js';
import initDebug from 'debug';
const debug = initDebug('knifecycle');
export const FATAL_ERROR = '$fatalError';
async function initFatalError() {
    const errorPromises = [];
    let errorCatchStep = 0;
    let rejectFatalError;
    const errorPromise = new Promise((_resolve, reject) => {
        rejectFatalError = reject;
    });
    const throwFatalError = (err) => {
        debug('Handled a fatal error', printStackTrace(err));
        rejectFatalError(err);
    };
    const handleErrorCatch = () => {
        const currentStep = ++errorCatchStep;
        Promise.all(errorPromises).catch((err) => {
            if (currentStep === errorCatchStep) {
                throwFatalError(err);
            }
            else {
                debug(`Ignored a fatal error ${currentStep}/${errorCatchStep}:`, printStackTrace(err));
            }
        });
    };
    return {
        errorPromise,
        registerErrorPromise: (errorPromise) => {
            errorPromises.push(errorPromise);
            handleErrorCatch();
        },
        unregisterErrorPromise: (errorPromise) => {
            errorPromises.filter((anErrorPromise) => anErrorPromise !== errorPromise);
            handleErrorCatch();
        },
        throwFatalError,
    };
}
export default service(initFatalError, FATAL_ERROR, [], true);
//# sourceMappingURL=fatalError.js.map